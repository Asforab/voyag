/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as VoyageAI from "../../../../../api/index";
import * as core from "../../../../../core";
import { MultimodalembeddingsApiRequestInputsItem } from "../../types/MultimodalembeddingsApiRequestInputsItem";
import { MultimodalembeddingsApiRequestInputType } from "../../types/MultimodalembeddingsApiRequestInputType";

export const MultimodalembeddingsApiRequest: core.serialization.Schema<
    serializers.MultimodalembeddingsApiRequest.Raw,
    VoyageAI.MultimodalembeddingsApiRequest
> = core.serialization.object({
    inputs: core.serialization.list(MultimodalembeddingsApiRequestInputsItem),
    model: core.serialization.string(),
    inputType: core.serialization.property("input_type", MultimodalembeddingsApiRequestInputType.optional()),
    truncation: core.serialization.boolean().optional(),
    encodingFormat: core.serialization.property(
        "encoding_format",
        core.serialization.stringLiteral("base64").optional()
    ),
});

export declare namespace MultimodalembeddingsApiRequest {
    interface Raw {
        inputs: MultimodalembeddingsApiRequestInputsItem.Raw[];
        model: string;
        input_type?: MultimodalembeddingsApiRequestInputType.Raw | null;
        truncation?: boolean | null;
        encoding_format?: "base64" | null;
    }
}
